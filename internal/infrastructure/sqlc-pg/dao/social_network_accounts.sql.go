// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: social_network_accounts.sql

package dao

import (
	"context"

	"autoposting/internal/domain/model"
)

const createSocialNetworkAccount = `-- name: CreateSocialNetworkAccount :one
INSERT INTO autoposting.social_network_accounts (social_network, credentials, access_token)
VALUES ($1, $2, $3)
RETURNING id, social_network, credentials, access_token
`

type CreateSocialNetworkAccountParams struct {
	SocialNetwork string
	Credentials   string
	AccessToken   model.AccessToken
}

func (q *Queries) CreateSocialNetworkAccount(ctx context.Context, arg CreateSocialNetworkAccountParams) (*AutopostingSocialNetworkAccount, error) {
	row := q.db.QueryRow(ctx, createSocialNetworkAccount, arg.SocialNetwork, arg.Credentials, arg.AccessToken)
	var i AutopostingSocialNetworkAccount
	err := row.Scan(
		&i.ID,
		&i.SocialNetwork,
		&i.Credentials,
		&i.AccessToken,
	)
	return &i, err
}

const getSocialNetworkAccounts = `-- name: GetSocialNetworkAccounts :many
SELECT id, social_network, credentials, access_token FROM autoposting.social_network_accounts
WHERE (CASE WHEN $1::bool THEN social_network = ANY ($2::text[]) ELSE TRUE END)
`

type GetSocialNetworkAccountsParams struct {
	InSocialNetworkAnyOf bool
	SocialNetworkAnyOf   []string
}

func (q *Queries) GetSocialNetworkAccounts(ctx context.Context, arg GetSocialNetworkAccountsParams) ([]*AutopostingSocialNetworkAccount, error) {
	rows, err := q.db.Query(ctx, getSocialNetworkAccounts, arg.InSocialNetworkAnyOf, arg.SocialNetworkAnyOf)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*AutopostingSocialNetworkAccount
	for rows.Next() {
		var i AutopostingSocialNetworkAccount
		if err := rows.Scan(
			&i.ID,
			&i.SocialNetwork,
			&i.Credentials,
			&i.AccessToken,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSocialNetworkAccount = `-- name: UpdateSocialNetworkAccount :exec
UPDATE autoposting.social_network_accounts
SET social_network = $2, credentials = $3, access_token = $3
WHERE id = $1
`

type UpdateSocialNetworkAccountParams struct {
	ID            int32
	SocialNetwork string
	Credentials   string
}

func (q *Queries) UpdateSocialNetworkAccount(ctx context.Context, arg UpdateSocialNetworkAccountParams) error {
	_, err := q.db.Exec(ctx, updateSocialNetworkAccount, arg.ID, arg.SocialNetwork, arg.Credentials)
	return err
}
